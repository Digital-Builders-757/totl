#!/usr/bin/env node

/**
 * Encoding Fix Script
 * 
 * This script fixes the encoding corruption in types/database.ts
 * by regenerating it with proper UTF-8 encoding and line endings.
 */

import { execSync } from 'child_process';
import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';

const PINNED_CLI_VERSION = '2.34.3';
const DEV_PROJECT_ID = 'utvircuwknqzpnmvxidp';

console.log('🔧 Fixing encoding corruption in types/database.ts...');

try {
  // Step 1: Generate raw types output
  console.log('📡 Fetching types from Supabase...');
  const rawTypes = execSync(
    `npx -y supabase@${PINNED_CLI_VERSION} gen types typescript --project-id ${DEV_PROJECT_ID} --schema public`,
    { 
      encoding: 'utf8',
      maxBuffer: 1024 * 1024 * 10 // 10MB buffer
    }
  );

  // Step 2: Clean the output (remove any BOM or encoding issues)
  console.log('🧹 Cleaning encoding issues...');
  let cleanTypes = rawTypes;
  
  // Remove UTF-8 BOM if present
  if (cleanTypes.charCodeAt(0) === 0xFEFF) {
    cleanTypes = cleanTypes.slice(1);
  }
  
  // Normalize line endings to LF
  cleanTypes = cleanTypes.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
  
  // Remove any null bytes or other encoding artifacts
  cleanTypes = cleanTypes.replace(/\0/g, '');

  // Step 3: Add proper auto-generated banner
  const banner = `// AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
// Generated from Supabase schema using: npx supabase gen types typescript --project-id ${DEV_PROJECT_ID} --schema public
// Last updated: ${new Date().toISOString()}
// 
// This file is automatically generated from the remote Supabase schema.
// Any manual edits will be overwritten on the next type generation.
// To regenerate: npx -y supabase@${PINNED_CLI_VERSION} gen types typescript --project-id ${DEV_PROJECT_ID} --schema public > types/database.ts

`;

  // Step 4: Combine banner with cleaned types
  const finalContent = banner + cleanTypes;

  // Step 5: Write with proper UTF-8 encoding (no BOM)
  console.log('💾 Writing file with proper encoding...');
  writeFileSync(join(process.cwd(), 'types/database.ts'), finalContent, {
    encoding: 'utf8',
    flag: 'w'
  });

  // Step 6: Verify the file was written correctly
  console.log('✅ Verifying file integrity...');
  const writtenContent = readFileSync(join(process.cwd(), 'types/database.ts'), 'utf8');
  
  if (writtenContent.includes('export type Database = {')) {
    console.log('✅ Types file generated successfully!');
    console.log(`📁 File: types/database.ts`);
    console.log(`📏 Size: ${finalContent.length} characters`);
    console.log(`🔍 Contains Database export: ${writtenContent.includes('export type Database = {')}`);
  } else {
    console.error('❌ File verification failed - Database export not found');
    process.exit(1);
  }
  
} catch (error) {
  console.error('❌ Failed to fix encoding issue:', error.message);
  process.exit(1);
}
