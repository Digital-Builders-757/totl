#!/usr/bin/env node

/**
 * Fixed Types Generation Script
 * 
 * This script generates types with proper UTF-8 encoding and line endings
 * to prevent the encoding corruption issues we've been experiencing.
 */

import { execSync } from 'child_process';
import { writeFileSync } from 'fs';
import { join } from 'path';

const PINNED_CLI_VERSION = '2.34.3';
const DEV_PROJECT_ID = 'utvircuwknqzpnmvxidp';

console.log('🔧 Generating types with proper encoding...');

try {
  // Generate types using the CLI
  const typesOutput = execSync(
    `npx -y supabase@${PINNED_CLI_VERSION} gen types typescript --project-id ${DEV_PROJECT_ID} --schema public`,
    { 
      encoding: 'utf8',
      maxBuffer: 1024 * 1024 * 10 // 10MB buffer
    }
  );

  // Add proper auto-generated banner
  const banner = `// AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
// Generated from Supabase schema using: npx supabase gen types typescript --project-id ${DEV_PROJECT_ID} --schema public
// Last updated: ${new Date().toISOString()}
// 
// This file is automatically generated from the remote Supabase schema.
// Any manual edits will be overwritten on the next type generation.
// To regenerate: npx -y supabase@${PINNED_CLI_VERSION} gen types typescript --project-id ${DEV_PROJECT_ID} --schema public > types/database.ts

`;

  // Combine banner with generated types
  const finalContent = banner + typesOutput;

  // Write with proper UTF-8 encoding (no BOM)
  writeFileSync(join(process.cwd(), 'types/database.ts'), finalContent, {
    encoding: 'utf8',
    flag: 'w'
  });

  console.log('✅ Types generated successfully with proper encoding');
  console.log(`📁 File: types/database.ts`);
  console.log(`📏 Size: ${finalContent.length} characters`);
  
} catch (error) {
  console.error('❌ Failed to generate types:', error.message);
  process.exit(1);
}
