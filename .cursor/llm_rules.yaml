# Totl Agency LLM Coding Rules
# Version: 2.3
# This file provides a comprehensive set of rules for the LLM to follow when
# generating code for the Totl Agency platform. Adhering to these rules ensures
# consistency, maintainability, and alignment with the project's architecture.

# üéØ TASK PROMPT TEMPLATE (USE THIS FOR EVERY REQUEST)
task_prompt_template: |
  Before you change anything:
  
  1. Read this entire rules file and follow it strictly
  2. Do not invent props or types - if a prop is missing, first update the component type and all call sites
  3. CRITICAL: Use correct Supabase client for context:
     * Server Components: createSupabaseServerClient() (read-only cookies)
     * Server Actions/Route Handlers: createSupabaseActionClient() (can modify cookies)
     * Client Components: createSupabaseBrowserClient()
  4. No DB calls in client components - mutations must be Server Actions
  5. After changes, ensure this "Definition of Done" is met:
     * npx tsc --noEmit passes
     * eslint . --ext .ts,.tsx --max-warnings 0 passes
     * No use of placeholderQuery prop on <SafeImage />
     * No any types
     * If schema changed ‚Üí create migration + regenerate types/database.ts
     * Test in production mode: npm run build && npm run start
  
  Output: a unified diff (git patch) and a short note of why the change satisfies the DoD.

# üìå CRITICAL FILES TO PIN IN CURSOR
critical_files:
  - "docs/DOCUMENTATION_OVERVIEW.md - Navigation guide for all documentation"
  - "docs/TROUBLESHOOTING_GUIDE.md - Common issues and debugging strategies"
  - "database_schema_audit.md - Database schema (single source of truth)"
  - "types/supabase.ts - TypeScript type re-exports"
  - "lib/supabase-client.ts - Centralized Supabase client"
  - "components/ui/safe-image.tsx - SafeImage component (do not modify props)"
  - "hooks/use-toast.ts - Toast system (single source of truth)"
  - "TOTL_PROJECT_CONTEXT_PROMPT.md - Complete project context"

# üö® CRITICAL: DOCUMENTATION-FIRST APPROACH
documentation_requirements:
  before_any_changes:
    - "ALWAYS check relevant documentation files before making any changes"
    - "Read docs/DOCUMENTATION_OVERVIEW.md to understand the documentation structure"
    - "Reference docs/DEVELOPER_QUICK_REFERENCE.md for common patterns"
    - "Check docs/CODING_STANDARDS.md for development guidelines"
    - "Review database_schema_audit.md for database changes"
    - "Consult TOTL_PROJECT_CONTEXT_PROMPT.md for complete project context"
  
  after_major_changes:
    - "ALWAYS update relevant documentation after making significant changes"
    - "Update timestamps in modified documentation files"
    - "Consolidate any new information into existing documentation"
    - "Remove outdated information and patterns"
    - "Ensure cross-references between files remain accurate"
    - "Update docs/DOCUMENTATION_OVERVIEW.md if adding new documentation"

# üîß DEBUGGING & ERROR HANDLING PATTERNS
debugging_guidelines:
  error_investigation:
    - "Always check docs/TROUBLESHOOTING_GUIDE.md for known issues first"
    - "Look for production error digests in deployment logs"
    - "Test in production mode locally: npm run build && npm run start"
    - "Verify environment variables are available in correct context"
    - "Check Supabase client usage matches component type (Server vs Client)"
  
  common_patterns:
    cookie_errors:
      - "Server Components cannot modify cookies"
      - "Use createSupabaseServerClient() for read-only operations"
      - "Use createSupabaseActionClient() for Server Actions/Route Handlers"
    
    build_failures:
      - "Missing environment variables during build"
      - "UTF-8 BOM or line ending issues in generated files"
      - "Type mismatches from outdated generated types"
    
    schema_sync_issues:
      - "Always regenerate types after schema changes"
      - "Use consistent Supabase CLI version (v2.33.4)"
      - "Never hand-edit types/database.ts"
  
  prevention_strategies:
    - "Use npm run schema:verify-fast for quick validation"
    - "Test both development and production builds"
    - "Keep documentation updated with new patterns"
    - "Add troubleshooting entries for new issue types"
  
  documentation_files:
    - "README.md - Project overview and quick start"
    - "docs/DOCUMENTATION_OVERVIEW.md - Navigation guide for all documentation"
    - "docs/DEVELOPER_QUICK_REFERENCE.md - Daily development patterns"
    - "docs/CODING_STANDARDS.md - Code quality guidelines"
    - "docs/ONBOARDING.md - Complete setup guide"
    - "docs/AUTH_STRATEGY.md - Authentication implementation"
    - "docs/email-service.md - Email integration guide"
    - "database_schema_audit.md - Database schema (single source of truth)"
    - "DEPLOYMENT.md - Deployment guide"
    - "SECURITY_FIXES_SUMMARY.md - Security improvements"

# üñ•Ô∏è POWERSHELL ENVIRONMENT
environment:
  terminal: "PowerShell (Windows)"
  commands:
    - "When invoking env vars, use $env:NAME (no quotes), e.g., `--project-id $env:SUPABASE_PROJECT_ID`."
    - "Prefer `supabase gen types --linked` to avoid quoting issues."
    - "Use PowerShell-compatible commands only"
    - "Use Get-ChildItem instead of ls"
    - "Use Get-Content instead of cat"
    - "Use Select-String instead of grep"
    - "Use Where-Object for filtering"
    - "Use ForEach-Object for iteration"
    - "Use New-Item for creating files/directories"
    - "Use Remove-Item for deleting files/directories"
    - "Use Copy-Item for copying files"
    - "Use Move-Item for moving files"
    - "Use Test-Path for checking file existence"
    - "Use Get-Process for process management"
    - "Use Start-Process for running applications"
  
  common_powershell_patterns:
    - "Get-ChildItem -Recurse -Filter '*.ts' | Where-Object { $_.Name -like '*component*' }"
    - "Get-Content file.txt | Select-String 'pattern'"
    - "Get-ChildItem -Directory | ForEach-Object { Write-Host $_.Name }"
    - "if (Test-Path 'file.txt') { Write-Host 'File exists' }"
    - "New-Item -ItemType File -Name 'newfile.txt'"
    - "Remove-Item 'file.txt' -Force"

project_overview:
  name: "Totl Agency Platform"
  description: "A full-stack application connecting modeling talent with clients for gigs. Built with Next.js and Supabase."
  principles:
    - "TypeScript first: Use TypeScript for all code."
    - "Server Components by default: Leverage Next.js App Router and RSC for data fetching."
    - "Mobile-first and accessible: Design for mobile and ensure ARIA compliance."
    - "Security-conscious: Assume Row-Level Security (RLS) is always active."
    - "Documentation-first: Always check and update documentation."

architecture:
  framework: "Next.js 15 (App Router, React Server Components)"
  database: "Supabase (PostgreSQL)"
  styling: "TailwindCSS with shadcn/ui"
  authentication: "@supabase/ssr with createServerClient (SSR cookies)"
  form_handling: "React Hook Form + Zod for validation"
  state_management:
    - "Use React's built-in state (useState, useReducer) for local component state."
    - "Use React Context for sharing state across a few components."
    - "Consider Zustand for complex global state if necessary."

directory_structure:
  - path: "/app"
    description: "Next.js App Router routes, layouts, and pages (Server Components)."
    subdirectories:
      - path: "/app/(auth)"
        description: "Authentication-related routes (login, signup)."
      - path: "/app/talent"
        description: "Routes for the talent dashboard."
      - path: "/app/client"
        description: "Routes for the client dashboard."
      - path: "/app/admin"
        description: "Routes for the admin dashboard."
      - path: "/app/api"
        description: "API route handlers."
  - path: "/components"
    description: "Reusable, presentational-only UI components."
    subdirectories:
      - path: "/components/ui"
        description: "Core UI components from shadcn/ui."
  - path: "/lib"
    description: "Shared utilities, Supabase clients, and helper functions."
    subdirectories:
      - path: "/lib/actions"
        description: "Server Actions for form submissions and mutations."
  - path: "/supabase"
    description: "Supabase-related files."
    subdirectories:
      - path: "/supabase/migrations"
        description: "Timestamped SQL files for database schema changes. NEVER edit existing migration files."
  - path: "/hooks"
    description: "Custom React hooks."
  - path: "/types"
    description: "Global TypeScript type definitions. The file `types/database.ts` is AUTO-GENERATED from the live Supabase schema. NEVER manually edit this file."
  - path: "/docs"
    description: "Project documentation. Always check these files before making changes."

frameworks_and_libraries:
  next_js:
    - "Use the App Router for all routes."
    - "Prefer Server Components for data fetching."
    - "Use Server Actions for mutations only; never mutate in client components."
    - "Use the SSR client from `/lib/supabase-client.ts` (built on @supabase/ssr)."
    - "Use the admin client from `/lib/supabase-admin-client.ts` only in server-only contexts."
    - "Always select explicit columns; never use `select('*')` in app code."
    - "Use `<SafeImage />` (wraps next/image) for images."
  react:
    - "Use functional components with hooks."
    - "Components in `/components` must be presentational (no data fetching)."
  supabase:
    - "Import the SSR client from lib/supabase-client.ts; do not import @supabase/supabase-js directly in app code."
    - "Type data with `import type { Database } from '@/types/supabase'` (re-export); never import from types/database.ts."
    - "Service role key only on the server (Server Actions, API routes)."
    - "For complex joins, prefer database VIEWS or RPC."
    - "Always select explicit columns. `{ returning: 'minimal' }` for inserts unless you need data back."
  tailwind_css:
    - "Use utility classes directly in JSX."
    - "Avoid using `@apply` or custom CSS files."
    - "Use theme variables from `tailwind.config.ts` (e.g., `bg-background`, `text-primary`)."
    - "Use responsive prefixes (`md:`, `lg:`) for mobile-first design."

coding_style:
  naming_conventions:
    - "File names: `kebab-case.ts` (e.g., `supabase-client.ts`)."
    - "Component names: `PascalCase` (e.g., `TalentCard`)."
    - "Variable/Function names: `camelCase` (e.g., `getUserProfile`)."
    - "TypeScript Interfaces/Types: `PascalCase` (e.g., `interface TalentProfileProps`)."
  formatting:
    - "Indentation: 2 spaces."
    - "Use Prettier for code formatting (configured in the project). Run 'npm run format' before pushing."
  comments:
    - "Use JSDoc for documenting complex functions, components, and props."
    - "Add inline comments only for non-obvious logic."
  linting:
    - "Run ESLint & Prettier before commits."
    - "Rules: no-explicit-any (error), consistent-type-imports (error), import/order (warn with auto-fix), @typescript-eslint/no-unused-vars with underscore ignore."

component_standards:
  props:
    - "Define a TypeScript `interface` for props for every component, named `ComponentNameProps`."
  exports:
    - "Use named exports for components: `export function MyComponent() {}`."
  styling:
    - "Use the `cn()` utility from `/lib/utils.ts` for dynamic or conditional class names."
  custom_components:
    - "Use `<SafeImage />` for all images to handle fallbacks and optimization."
    - "Use `<SubmitButton />` in forms for automatic loading states."

data_management:
  fetching:
    - "Prioritize data fetching in Server Components."
    - "For client-side fetching, use `useEffect` or a library like SWR/TanStack Query if needed, but prefer Server Actions."
  validation:
    - "Use `zod` to define schemas for all form and API validation."
    - "Use `react-hook-form` to manage form state and integrate with Zod schemas."

database:
  migrations:
    - "Create new migrations for schema changes: `supabase migration new <desc>`."
    - "Never modify an applied migration."
    - "After schema changes, regenerate types via linked project (Windows-safe): `supabase link --project-ref <REF>` then `supabase gen types typescript --linked --schema public > types/database.ts`."
    - "Keep `types/supabase.ts` as a re-export: `export type { Database } from './database'`."
  naming:
    - "Table names: `snake_case`, plural (e.g., `talent_profiles`)."
    - "Column names: `snake_case` (e.g., `full_name`)."
    - "Foreign keys: `[table_name_singular]_id` (e.g., `user_id`)."
  querying:
    - "All queries must respect Row-Level Security (RLS)."
    - "In SQL (policies/views/RPC), use `(select auth.uid())` in predicates for performance."
    - "In application code, use the authenticated user's `id` from the session; do **not** call `auth.uid()` in PostgREST filters."
    - "Use explicit column selection; avoid `select('*')` in app code (allowed only in internal scripts)."

views_and_rpc:
  - "Name admin/reporting views with `admin_` prefix (e.g., `admin_talent_dashboard`)."
  - "Grant SELECT only to `authenticated`; gate sensitive access by role inside the view or via policies."
  - "RPC that touches system catalogs must be SECURITY DEFINER and role-gated inside the function."

authentication_and_security:
  route_protection:
    - "Use `middleware.ts` to protect routes."
    - "Redirect unauthenticated users to `/login`."
    - "After login, redirect users to their respective dashboards (`/talent/dashboard` or `/client/dashboard`) based on their role from the `profiles` table."
  rls:
    - "Policies must avoid per-row re-evaluation of auth functions; wrap calls like `auth.uid()` with `(select auth.uid())`."
    - "Use views or RPC for admin/reporting paths and gate them by role inside SQL when needed."
  secrets:
    - "Never hardcode API keys, JWT secrets, or service role keys."
    - "Access all secrets from environment variables (`process.env`)."
    - "No service role in client/browser code. Server-only (API routes, server actions)."

accessibility:
  - "Interactive behavior belongs on native interactive elements (use <button>, not <div onClick>)."
  - "Clickable non-native elements must have role, tabIndex, and keyboard handlers; prefer native elements instead."
  - "All images require meaningful alt text; decorative images use empty alt."

anti_patterns:
  - name: "DB calls in client components"
    description: "Do not call Supabase from client components."
    correct_approach: "Fetch in Server Components or Server Actions; pass data/handlers to client components."
  - name: "Deep nested selects for admin dashboards"
    description: "Avoid brittle nested selects with multiple relationships."
    correct_approach: "Use typed database VIEWS and select from them."
  - name: "Calling auth.uid() in app filters"
    description: "PostgREST filters in app code should not call auth.uid()."
    correct_approach: "Use the session's `user.id`; reserve `(select auth.uid())` for SQL inside policies/views/RPC."
  - name: "Client-side data fetching in UI page components"
    description: "Do not fetch data on the client side within page components using `useEffect` and `useState`. This was refactored in the Talent Dashboard."
    correct_approach: "Fetch data in Server Components (at the page level) and pass it as props to client components. This is more performant and aligns with Next.js best practices."
  - name: "Using select('*') in app code"
    description: "Do not use `select('*')` in application code. This can expose unnecessary data and impact performance."
    correct_approach: "Use explicit column selection for better performance and security. Only use `select('*')` in internal admin scripts."
  - name: "Direct Supabase client imports"
    description: "Do not import `@supabase/supabase-js` directly in pages/components."
    correct_approach: "Use the centralized client from `lib/supabase-client.ts` for consistent typing and security."
  - name: "Mixing Server and Client Component logic"
    description: "Do not use React hooks that depend on the browser (like `useState`, `useEffect`, `onClick`) inside a component that is not explicitly marked with the `'use client'` directive at the top of the file."
    correct_approach: "Keep data-fetching and server-side logic in Server Components. If a component requires interactivity or state, extract it into a separate Client Component and import it into the Server Component."
  - name: "Making changes without checking documentation"
    description: "Do not make changes to the codebase without first checking relevant documentation files."
    correct_approach: "Always read the appropriate documentation files before making changes, and update documentation after significant changes."
  - name: "Using Unix commands in PowerShell"
    description: "Do not use Unix/Linux commands like `ls`, `cat`, `grep` in PowerShell environment."
    correct_approach: "Use PowerShell-compatible commands like `Get-ChildItem`, `Get-Content`, `Select-String`."
  - name: "Manual editing of types/database.ts"
    description: "Do not manually edit `types/database.ts`. This file is auto-generated from the Supabase schema."
    correct_approach: "Regenerate types using `npx supabase gen types typescript --project-id \"$SUPABASE_PROJECT_ID\" --schema public > types/database.ts` after schema changes."

testing_and_ci:
  - "CI must run: lint, typecheck, build, and (optionally) `supabase db push --linked --no-seed` on main."
  - "Pre-commit runs lint-staged with eslint + prettier; builds must pass."
  - "Run `npm run types:regen` after migrations and verify with `npm run types:check`."
  - "All PRs and merges must pass the GitHub Actions lint and format checks. These are enforced via workflows in .github/workflows/"
  - "Run schema verification before commits: `npm run types:check`"
  - "Ensure types/database.ts is in sync with live schema"

# üéØ DEFINITION OF DONE (MANDATORY)
definition_of_done:
  before_any_code_changes:
    - "ALWAYS read this entire rules file before making changes"
    - "Check component props/types before modifying - do not invent new props without updating all call sites"
    - "If modifying SafeImage, do NOT add new props - placeholderQuery is deprecated and banned"
    - "If touching data fetching/mutations, maintain server/client boundaries"
    - "Check database_schema_audit.md for schema changes"
    - "Reference types/supabase.ts for type imports (never from types/database.ts directly)"
  
  after_code_changes:
    - "Run: npx tsc --noEmit (must pass with 0 errors)"
    - "Run: npx eslint . --ext .ts,.tsx --max-warnings 0 (must pass with 0 warnings)"
    - "No use of placeholderQuery prop on <SafeImage /> (deprecated)"
    - "No any types in TypeScript"
    - "If schema changed ‚Üí create migration + regenerate types/database.ts"
    - "All imports use centralized clients (lib/supabase-client.ts, lib/supabase-admin-client.ts)"
    - "No direct @supabase/supabase-js imports in app code"
  
  validation_commands:
    - "npx tsc --noEmit"
    - "npx eslint . --ext .ts,.tsx --max-warnings 0"
    - "npm run build (if applicable)"

# üö´ SPECIFIC PREVENTION RULES
prevention_rules:
  safeimage_component:
    - "DO NOT add new props to SafeImage components"
    - "placeholderQuery prop is deprecated and banned via ESLint"
    - "If you need new functionality, create a new component or extend existing props carefully"
    - "All SafeImage call sites must type-check without placeholderQuery"
  
  toast_system:
    - "DO NOT rewrite hooks/use-toast.ts without following the established pattern"
    - "This file is the single source of truth for toast actions/types"
    - "If modifying, ensure ActionType and Action interfaces remain consistent"
    - "Use React.createElement instead of JSX in this file to avoid TypeScript issues"
  
  database_access:
    - "NEVER import @supabase/supabase-js directly in app code"
    - "Use lib/supabase-client.ts for user-level access"
    - "Use lib/supabase-admin-client.ts for admin operations (server-only)"
    - "No database calls in client components - use Server Components or Server Actions"
  
  type_safety:
    - "Import Database type from types/supabase.ts, never from types/database.ts"
    - "No any types - use proper TypeScript types from generated schema"
    - "If types are missing, regenerate types/database.ts first"
    - "Use explicit column selection in queries, avoid select('*') in app code"

# üìù DOCUMENTATION UPDATE CHECKLIST
documentation_checklist:
  before_changes:
    - [ ] "Read docs/DOCUMENTATION_OVERVIEW.md"
    - [ ] "Check docs/DEVELOPER_QUICK_REFERENCE.md for patterns"
    - [ ] "Review docs/CODING_STANDARDS.md for guidelines"
    - [ ] "Consult database_schema_audit.md for database changes"
    - [ ] "Reference TOTL_PROJECT_CONTEXT_PROMPT.md for context"
  
  after_changes:
    - [ ] "Update relevant documentation files"
    - [ ] "Update timestamps in modified files"
    - [ ] "Remove outdated information"
    - [ ] "Ensure cross-references are accurate"
    - [ ] "Update docs/DOCUMENTATION_OVERVIEW.md if needed"
    - [ ] "Test documentation instructions"
