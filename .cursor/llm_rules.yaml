# Totl Agency LLM Coding Rules
# Version: 2.0
# This file provides a comprehensive set of rules for the LLM to follow when
# generating code for the Totl Agency platform. Adhering to these rules ensures
# consistency, maintainability, and alignment with the project's architecture.

# üö® CRITICAL: DOCUMENTATION-FIRST APPROACH
documentation_requirements:
  before_any_changes:
    - "ALWAYS check relevant documentation files before making any changes"
    - "Read docs/DOCUMENTATION_OVERVIEW.md to understand the documentation structure"
    - "Reference docs/DEVELOPER_QUICK_REFERENCE.md for common patterns"
    - "Check docs/CODING_STANDARDS.md for development guidelines"
    - "Review database_schema_audit.md for database changes"
    - "Consult TOTL_PROJECT_CONTEXT_PROMPT.md for complete project context"
  
  after_major_changes:
    - "ALWAYS update relevant documentation after making significant changes"
    - "Update timestamps in modified documentation files"
    - "Consolidate any new information into existing documentation"
    - "Remove outdated information and patterns"
    - "Ensure cross-references between files remain accurate"
    - "Update docs/DOCUMENTATION_OVERVIEW.md if adding new documentation"
  
  documentation_files:
    - "README.md - Project overview and quick start"
    - "docs/DOCUMENTATION_OVERVIEW.md - Navigation guide for all documentation"
    - "docs/DEVELOPER_QUICK_REFERENCE.md - Daily development patterns"
    - "docs/CODING_STANDARDS.md - Code quality guidelines"
    - "docs/ONBOARDING.md - Complete setup guide"
    - "docs/AUTH_STRATEGY.md - Authentication implementation"
    - "docs/email-service.md - Email integration guide"
    - "database_schema_audit.md - Database schema (single source of truth)"
    - "DEPLOYMENT.md - Deployment guide"
    - "SECURITY_FIXES_SUMMARY.md - Security improvements"

# üñ•Ô∏è POWERSHELL ENVIRONMENT
environment:
  terminal: "PowerShell (Windows)"
  commands:
    - "Use PowerShell-compatible commands only"
    - "Use Get-ChildItem instead of ls"
    - "Use Get-Content instead of cat"
    - "Use Select-String instead of grep"
    - "Use Where-Object for filtering"
    - "Use ForEach-Object for iteration"
    - "Use New-Item for creating files/directories"
    - "Use Remove-Item for deleting files/directories"
    - "Use Copy-Item for copying files"
    - "Use Move-Item for moving files"
    - "Use Test-Path for checking file existence"
    - "Use Get-Process for process management"
    - "Use Start-Process for running applications"
  
  common_powershell_patterns:
    - "Get-ChildItem -Recurse -Filter '*.ts' | Where-Object { $_.Name -like '*component*' }"
    - "Get-Content file.txt | Select-String 'pattern'"
    - "Get-ChildItem -Directory | ForEach-Object { Write-Host $_.Name }"
    - "if (Test-Path 'file.txt') { Write-Host 'File exists' }"
    - "New-Item -ItemType File -Name 'newfile.txt'"
    - "Remove-Item 'file.txt' -Force"

project_overview:
  name: "Totl Agency Platform"
  description: "A full-stack application connecting modeling talent with clients for gigs. Built with Next.js and Supabase."
  principles:
    - "TypeScript first: Use TypeScript for all code."
    - "Server Components by default: Leverage Next.js App Router and RSC for data fetching."
    - "Mobile-first and accessible: Design for mobile and ensure ARIA compliance."
    - "Security-conscious: Assume Row-Level Security (RLS) is always active."
    - "Documentation-first: Always check and update documentation."

architecture:
  framework: "Next.js 14+ (App Router)"
  database: "Supabase (PostgreSQL)"
  styling: "TailwindCSS with shadcn/ui"
  authentication: "Supabase Auth with @supabase/auth-helpers-nextjs"
  form_handling: "React Hook Form + Zod for validation"
  state_management:
    - "Use React's built-in state (useState, useReducer) for local component state."
    - "Use React Context for sharing state across a few components."
    - "Consider Zustand for complex global state if necessary."

directory_structure:
  - path: "/app"
    description: "Next.js App Router routes, layouts, and pages (Server Components)."
    subdirectories:
      - path: "/app/(auth)"
        description: "Authentication-related routes (login, signup)."
      - path: "/app/talent"
        description: "Routes for the talent dashboard."
      - path: "/app/client"
        description: "Routes for the client dashboard."
      - path: "/app/admin"
        description: "Routes for the admin dashboard."
      - path: "/app/api"
        description: "API route handlers."
  - path: "/components"
    description: "Reusable, presentational-only UI components."
    subdirectories:
      - path: "/components/ui"
        description: "Core UI components from shadcn/ui."
  - path: "/lib"
    description: "Shared utilities, Supabase clients, and helper functions."
    subdirectories:
      - path: "/lib/actions"
        description: "Server Actions for form submissions and mutations."
  - path: "/supabase"
    description: "Supabase-related files."
    subdirectories:
      - path: "/supabase/migrations"
        description: "Timestamped SQL files for database schema changes. NEVER edit existing migration files."
  - path: "/hooks"
    description: "Custom React hooks."
  - path: "/types"
    description: "Global TypeScript type definitions. The `types/database.ts` file contains manually-defined interfaces for database tables (e.g., `TalentProfile`). It does NOT use auto-generated types."
  - path: "/docs"
    description: "Project documentation. Always check these files before making changes."

frameworks_and_libraries:
  next_js:
    - "Use the App Router for all new routes."
    - "Fetch data in Server Components (`page.tsx`, `layout.tsx`) by default."
    - "Use Server Actions for form submissions and data mutations."
    - "Use `next/image` via the `<SafeImage />` wrapper for all images."
    - "Use the pre-configured client from `/lib/supabase-client.ts`."
    - "For admin-level tasks, use the client from `/lib/supabase-admin-client.ts` in secure server environments only."
    - "Always use the `safeQuery` wrapper from `/lib/safe-query.ts` for RLS-protected queries."
    - "Prefer `select('*')` when fetching data for a component that uses a pre-defined TypeScript interface (e.g., `TalentProfile`) to ensure the fetched data matches the type definition and avoids linter errors. Only select specific columns if the data is used for a one-off task and not passed to a typed component."
    - "Use `{ returning: 'minimal' }` for inserts unless you need the returned data."
  react:
    - "Use functional components with hooks."
    - "Components in `/components` must be presentational (no data fetching)."
  supabase:
    - "Use the pre-configured client from `/lib/supabase-client.ts`."
    - "For admin-level tasks, use the client from `/lib/supabase-admin-client.ts` in secure server environments only."
    - "Always use the `safeQuery` wrapper from `/lib/safe-query.ts` for RLS-protected queries."
    - "Never use `select('*')`. Always select specific columns."
    - "Use `{ returning: 'minimal' }` for inserts unless you need the returned data."
  tailwind_css:
    - "Use utility classes directly in JSX."
    - "Avoid using `@apply` or custom CSS files."
    - "Use theme variables from `tailwind.config.ts` (e.g., `bg-background`, `text-primary`)."
    - "Use responsive prefixes (`md:`, `lg:`) for mobile-first design."

coding_style:
  naming_conventions:
    - "File names: `kebab-case.ts` (e.g., `supabase-client.ts`)."
    - "Component names: `PascalCase` (e.g., `TalentCard`)."
    - "Variable/Function names: `camelCase` (e.g., `getUserProfile`)."
    - "TypeScript Interfaces/Types: `PascalCase` (e.g., `interface TalentProfileProps`)."
  formatting:
    - "Indentation: 2 spaces."
    - "Use Prettier for code formatting (configured in the project). Run 'npm run format' before pushing."
  comments:
    - "Use JSDoc for documenting complex functions, components, and props."
    - "Add inline comments only for non-obvious logic."
  linting:
    - "Run ESLint (npm run lint) and Prettier (npm run format) before every commit, PR, and merge. All code must pass lint and formatting checks."

component_standards:
  props:
    - "Define a TypeScript `interface` for props for every component, named `ComponentNameProps`."
  exports:
    - "Use named exports for components: `export function MyComponent() {}`."
  styling:
    - "Use the `cn()` utility from `/lib/utils.ts` for dynamic or conditional class names."
  custom_components:
    - "Use `<SafeImage />` for all images to handle fallbacks and optimization."
    - "Use `<SubmitButton />` in forms for automatic loading states."

data_management:
  fetching:
    - "Prioritize data fetching in Server Components."
    - "For client-side fetching, use `useEffect` or a library like SWR/TanStack Query if needed, but prefer Server Actions."
  validation:
    - "Use `zod` to define schemas for all form and API validation."
    - "Use `react-hook-form` to manage form state and integrate with Zod schemas."

database:
  migrations:
    - "To change the database schema, ALWAYS create a new migration file."
    - "Use the command: `supabase migration new <description_in_snake_case>`."
    - "Write the SQL changes in the newly generated file in `/supabase/migrations`."
    - "NEVER modify a migration file that has already been applied."
    - "After database changes, update database_schema_audit.md to reflect the new schema."
  naming:
    - "Table names: `snake_case`, plural (e.g., `talent_profiles`)."
    - "Column names: `snake_case` (e.g., `full_name`)."
    - "Foreign keys: `[table_name_singular]_id` (e.g., `user_id`)."
  querying:
    - "All queries must respect Row-Level Security."
    - "When querying data for the logged-in user, use `auth.uid()` in the where clause."

authentication_and_security:
  route_protection:
    - "Use `middleware.ts` to protect routes."
    - "Redirect unauthenticated users to `/login`."
    - "After login, redirect users to their respective dashboards (`/talent/dashboard` or `/client/dashboard`) based on their role from the `profiles` table."
  rls:
    - "Assume RLS is enabled on all tables."
    - "Users can only access their own data unless a policy explicitly allows wider access (e.g., public gigs)."
  secrets:
    - "Never hardcode API keys, JWT secrets, or service role keys."
    - "Access all secrets from environment variables (`process.env`)."

anti_patterns:
  - name: "Client-side data fetching in UI page components"
    description: "Do not fetch data on the client side within page components using `useEffect` and `useState`. This was refactored in the Talent Dashboard."
    correct_approach: "Fetch data in Server Components (at the page level) and pass it as props to client components. This is more performant and aligns with Next.js best practices."
  - name: "Incomplete data fetching for typed components"
    description: "Do not use `select('col1, col2')` if the component you are passing the data to expects a full TypeScript interface (e.g. `TalentProfile`). This will cause a type mismatch."
    correct_approach: "Use `select('*')` to fetch the complete data model, ensuring it fully satisfies the TypeScript interface."
  - name: "Mixing Server and Client Component logic"
    description: "Do not use React hooks that depend on the browser (like `useState`, `useEffect`, `onClick`) inside a component that is not explicitly marked with the `'use client'` directive at the top of the file."
    correct_approach: "Keep data-fetching and server-side logic in Server Components. If a component requires interactivity or state, extract it into a separate Client Component and import it into the Server Component."
  - name: "Making changes without checking documentation"
    description: "Do not make changes to the codebase without first checking relevant documentation files."
    correct_approach: "Always read the appropriate documentation files before making changes, and update documentation after significant changes."
  - name: "Using Unix commands in PowerShell"
    description: "Do not use Unix/Linux commands like `ls`, `cat`, `grep` in PowerShell environment."
    correct_approach: "Use PowerShell-compatible commands like `Get-ChildItem`, `Get-Content`, `Select-String`."

testing_and_ci:
  - "All PRs and merges must pass the GitHub Actions lint and format checks. These are enforced via workflows in .github/workflows/"

# üìù DOCUMENTATION UPDATE CHECKLIST
documentation_checklist:
  before_changes:
    - [ ] "Read docs/DOCUMENTATION_OVERVIEW.md"
    - [ ] "Check docs/DEVELOPER_QUICK_REFERENCE.md for patterns"
    - [ ] "Review docs/CODING_STANDARDS.md for guidelines"
    - [ ] "Consult database_schema_audit.md for database changes"
    - [ ] "Reference TOTL_PROJECT_CONTEXT_PROMPT.md for context"
  
  after_changes:
    - [ ] "Update relevant documentation files"
    - [ ] "Update timestamps in modified files"
    - [ ] "Remove outdated information"
    - [ ] "Ensure cross-references are accurate"
    - [ ] "Update docs/DOCUMENTATION_OVERVIEW.md if needed"
    - [ ] "Test documentation instructions"
