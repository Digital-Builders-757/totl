name: "Schema Truth Verification"

on:
  pull_request:
    paths:
      - "supabase/migrations/**"
      - "types/database.ts"
      - "database_schema_audit.md"
  push:
    branches: [ main, develop ]
    paths:
      - "supabase/migrations/**"
      - "types/database.ts"
      - "database_schema_audit.md"

env:
  SUPABASE_PROJECT_REF_DEV: utvircuwknqzpnmvxidp

jobs:
  verify-schema:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Choose project ref by branch
        id: ref
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "ref=${{ secrets.SUPABASE_PROJECT_ID }}" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "ref=${SUPABASE_PROJECT_REF_DEV}" >> $GITHUB_OUTPUT
            echo "env=development" >> $GITHUB_OUTPUT
          fi

      - name: Verify environment variables
        run: |
          echo "Branch: ${GITHUB_REF##*/}"
          echo "Environment: ${{ steps.ref.outputs.env }}"
          echo "Project Ref: ${{ steps.ref.outputs.ref }}"
          node -e "console.log('SUPABASE_URL:', !!process.env.NEXT_PUBLIC_SUPABASE_URL, 'ANON_KEY:', !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)"
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Build application
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: npm run build

      - name: Login to Supabase (npx)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: npx -y supabase@2.34.3 login --token "$SUPABASE_ACCESS_TOKEN"

      - name: Generate types from remote schema (branch-aware)
        run: npx -y supabase@2.34.3 gen types typescript --project-id ${{ steps.ref.outputs.ref }} --schema public > types/temp_schema_types.ts

      - name: Normalize both files (strip BOM & normalize line endings)
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import sys

          def normalize(src, dst):
            b = open(src, "rb").read()
            # strip UTF-8 BOM
            if b.startswith(b"\xef\xbb\xbf"):
              b = b[3:]
            # normalize ALL line ending variants to LF
            b = b.replace(b"\r\n", b"\n").replace(b"\r", b"\n")
            open(dst, "wb").write(b)

          normalize("types/temp_schema_types.ts", "types/_remote.normalized.ts")
          normalize("types/database.ts",          "types/_local.normalized.ts")
          PY

      - name: Compare generated types with committed types (filtering noise)
        shell: bash
        run: |
          set -euo pipefail
          
          # Function to clean files by removing volatile __InternalSupabase block
          clean() {
            sed -E '/__InternalSupabase: \{/,/^\s*\}/d' "$1" | sed 's/\r$//'
          }
          
          # Create cleaned versions for comparison
          clean types/_remote.normalized.ts > types/_remote.clean.ts
          clean types/_local.normalized.ts > types/_local.clean.ts
          
          if ! diff -u types/_remote.clean.ts types/_local.clean.ts; then
            echo ""
            echo "‚ùå ERROR: types/database.ts is out of sync with remote schema"
            echo ""
            echo "üîß To fix locally:"
            echo "   # For development (current branch):"
            echo "   npm run types:regen:dev"
            echo "   # For production:"
            echo "   npm run types:regen:prod"
            echo ""
            echo "üìã Changes detected (excluding __InternalSupabase noise):"
            echo "   - Lines starting with '-' are in your local file but not in remote"
            echo "   - Lines starting with '+' are in remote but missing from your local file"
            echo ""
            echo "üåç Environment: ${{ steps.ref.outputs.env }}"
            echo "üîó Project Ref: ${{ steps.ref.outputs.ref }}"
            echo ""
            exit 1
          else
            echo "‚úÖ Types are in sync with remote schema (${{ steps.ref.outputs.env }})"
          fi

      - name: Verify schema & type hygiene (fast)
        shell: pwsh
        run: ./scripts/verify-schema-sync.ps1 -SkipDbGeneration -EnforceBanner:$false -SoftFail

      - name: Cleanup temp files
        if: always()
        run: rm -f types/_remote.normalized.ts types/_local.normalized.ts types/_remote.clean.ts types/_local.clean.ts types/temp_schema_types.ts 